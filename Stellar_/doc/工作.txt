2:24 2008-5-28
尝试将资源管理中用的Directory改成HashTable.以提高效率。
发现用Atom<String>做为ResourceId非常慢，因为每次资源增加的时候都需要排序，对字符串进行strcmp，这个函数非常慢，特别是调用次数过多的时候。
2:23 2008-5-26
两处可能引起卡的问题：
1、在Stage中更新所有entity，一旦enttiy很多的情况下，每个entity都要创建instance，会很慢，
	解决办法：把动态和静态entity分开，更新的时候只更新动态的。在加载的时候创建instance，必免更新的时候在一起创建，从而占用大量时间。
2、在资源管理模块中所有的资源都在一起更新，比如在ShaderResource中的resource是Directory类，每次增加一个资源都会排个序，非常慢。
	未解决，有待测试。


2:27 2008-5-22
新的加载方式导致WDT未加载成功
CHUNK加载的时候非常快，卡住可能是主线程哪里加载的时候有问题。

1:59 2008-5-19
随着加载数量的增加，明显的越来越慢，加载完成后虽然帧数很低，但相对稳定，所以第1点应该是问题的关键：
1、四叉树查找的时候会不会慢，将对象添加到合适的位置费多少时间？
2、查看渲染了多少对象，随着渲染对象的增加，也会降低速度。
3、视锥裁剪改成furstum

另外，将MPQ加载方式改成用stromLib！
实现连续加载地形。

2:42 2008-5-15
cell分布有问题，四叉树中的实例不是平均分布的？

1:49 2008-5-12
多线程加载基本框架已实现，还存在些问题，如怎么样设置managed里面的变量！！
多线程加载方式：辅助线程加载文件，需要数据的地方发读文件消息从辅助线程读，而不是一定性全加载了。

正常运行并显示地形
测试速度
添加FPS

=========================================================================================
lod
camera
fps

adtread的时候new新的内存，这块需要改掉。目前主线程还是很卡。terrainchunkentity放到WorldManager中实现。




M2
换装
max插件


需要处理的东西：

地形
  模型变换（位置、旋转、缩放）
  所有资源的BOUNDBOX（变换后BOX也要跟着变换）
  地图上有些小点空隙

  静态阴影(lightmap)
  加载多块地形（根据摄像机移动来加载需要的地块，释放不需要的地块）
  地形四叉树管理
    quadtree

  灯光
  地形高光

  Lod

wmo 
  protal bsp

m2 
  动画 粒子系统 mipmap

其它
  water
  sky
  fog
  load system  
    cpu->memory  memory->gpu
  index buffer 使用TRIANGLE STRIP，最后一个三角形使用退化（degenerate triangle）处理。



计划: bsp portal loadsystem animation partical water sky fog 优化  WorldEditor ModelEditor ParticalEditor
时间: 2008-2-22                                          2008-3-30                                      2008-5-30
////////////////////////////////////////////////////////////////////////////////////////////////////

floating-point precision errors 浮点精度问题
http://www.cs.unc.edu/~geom/theses/gottschalk/main.pdf     aabb


0.使用天空球包围整个世界,使用雾限制可控远景.
1.地形裁减: 
  1.使用四叉树算法对MapArea->AreaChunk逐层进行相对镜头的可见性裁减.
  2.在1过程中,对镜头内的地形进行水平线扫描剔除.
  2.然后镜头裁减完的区域必然是连续区域,对此连续区域作ROAM算法下的LOD处理,近细远粗.
2.模型裁减: 
  1.基于上述地形四叉树裁减下作基本的每一个模型的裁减,实践测试结果表明收益大于测试成本.
  2.距离裁减:以镜头为中心画圆,处于远景雾外的模型不作渲染,模型进雾后会逐步显示,这样不会有poping缺陷.
  3.不采用模型LOD,数据制作过于复杂,控制复杂,加大内存需求,也有poping缺陷,优点不明显.
  4.在地形水平线裁减中剔除物体.
3.进入BSP室内场景后的裁减.
