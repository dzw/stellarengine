//  //
// ##### ####  #   #                         -= Zipex Library =-                               //
//    ## #   # ## ## Config.h - Build confiruation                                             //
//   ##  ####   ###                                                                            //
//  ##   #      ###  Contains various #defines for configuring                                 //
// ##    #     ## ## the config build process                                                  //
// ##### #     #   # R1                              (C)2003-2004 Markus Ewald -> License.txt  //
//  //
#ifndef ZIPEX_CONFIG_H
#define ZIPEX_CONFIG_H

#ifndef __cplusplus
  #error Zipex requires C++
#endif

// Defines the current version of zipex. Can be used by 
// applications to indentify compatibility issues
//
#define ZIPEX_VERSION 0x120

// The following block will decide whether symbols are imported from a
// dll (client app) or exported to a dll (library). The ZIPEX_EXPORTS
// symbol should only be set when compiling the zipex library and
// nowhere else.
//
// If you dynamically link against zipex, you should define ZIPEX_DLL for
// your project in order to import the dll symbols from zipex.
//
#ifdef ZIPEX_DLL
  #ifdef ZIPEX_EXPORTS
    #define ZIPEX_API __declspec(dllexport)
  #else
    #define ZIPEX_API __declspec(dllimport)
  #endif
#else
  #define ZIPEX_API
#endif // ZIPEX_DLL

#ifdef WIN32
  #define ZIPEX_WIN32
#endif

// Some warnings generated by MSVC6 with STL headers
#if defined(_MSC_VER) && (_MSC_VER <= 1200)
  #pragma warning(disable:4786) // Warning: Debug symbol truncated to 255 characters
#endif

#include <numeric>

namespace Zipex {

// Import size_t from std into the zipex namespace
using std::size_t;

// We need a 64 bit type for some structures
#if defined(_MSC_VER) && (_MSC_VER <= 1200)
  typedef signed __int64 huge;
  typedef unsigned __int64 unsigned_huge;
#elif defined(ZIPEX_SUPPORT_LONG_LONG)
  typedef signed long long huge;
  typedef unsigned long long unsigned_huge;
#else
  struct huge {
    huge() {}
    huge(int value) : low(value), high(value < 0 ? -1 : 0) {}
    unsigned long low; signed long high;
  };
  struct unsigned_huge {
    unsigned_huge() {}
    unsigned_huge(int value) : low(value), high(0) {}
    unsigned long low; unsigned long high;
  };
#endif

}

#endif // ZIPEX_CONFIG_H
